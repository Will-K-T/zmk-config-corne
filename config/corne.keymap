/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        conditional_layers {
            compatible = "zmk,conditional-layers";
            tri_layer {
                if-layers = <1 2>;
                then-layer = <3>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
// |  ESC |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ENTER|
//                    | GUI | LWR | SPC |   |SHIFT| RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp ESC   &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LCTRL &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ENTER 
                  &kp LGUI &mo 1 &kp SPACE   &kp RSHIFT &mo 2 &kp RALT
                        >;
                };

                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB | `/~ |     |     |     |     |   |     | -/_ | +/= | {/[ | }/] | BSPC |
// |  ESC | 1/! | 2/@ | 3/# | 4/$ | 5/% |   | 6/^ | 7/& | 8/* | 9/( | 0/) |  '   |
// | CTRL | \/| |     |     |     |     |   |     |     |  ,  |  .  |  /  | ENTER|
//                    | GUI |     | SPC |   |SHIFT|     | ALT |
                        bindings = <
   &kp TAB   &kp GRAVE &none  &none  &none  &none    &none  &kp MINUS &kp PLUS  &kp LBKT &kp RBKT &kp BSPC
   &kp ESC   &kp N1    &kp N2 &kp N3 &kp N4 &kp N5   &kp N6 &kp N7    &kp N8    &kp N9   &kp N0   &kp SQT
   &kp LCTRL &kp NUBS  &none  &none  &none  &none    &none  &none     &kp COMMA &kp DOT  &kp FSLH &kp ENTER
                        &kp LGUI &trans &kp SPACE    &kp RSHIFT &trans &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |     |     |     |     | PGUP| HOME |
// |      | F1  | F2  | F3  | F4  | F5  |   | ARRL| ARRD| ARRU| ARRR|     |      |
// | CTRL | F10 | F11 | F12 |     |     |   | F6  | F7  | F8  | F9  | PGDN| END  |
//                    | GUI |     | SPC |   |SHIFT|     | ALT |
                        bindings = <
   &none     &none   &none   &none   &none  &none    &none    &none    &none  &none     &kp PG_UP &kp HOME
   &none     &kp F1  &kp F2  &kp F3  &kp F4 &kp F5   &kp LEFT &kp DOWN &kp UP &kp RIGHT &none     &none
   &kp LCTRL &kp F10 &kp F11 &kp F12 &none  &none    &kp F6   &kp F7   &kp F8 &kp F9    &kp PG_DN &kp END
                 &kp LGUI &trans &kp SPACE        &kp RSHIFT &trans &kp RALT
                        >;
                };

                combo_layer {
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |     |     |     |     |     | PREV |
// |BT CLR| BT0 | BT1 | BT2 | BT3 | BT4 |   |     | VOL-| VOL+|     |     |      |
// |      |     |     |     |     |     |   | NEXT|     |     |     |     |      |
//                    | GUI |     | SPC |   |SHIFT|     | ALT |
                        bindings = <
   &none      &none        &none        &none        &none        &none          &none &none        &none          &none &none &kp C_PREV
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &none &kp C_VOL_UP &kp C_VOL_DOWN &none &none &none
   &none      &none        &none        &none        &none        &none          &kp C_NEXT &none   &none          &none &none &none
                                                    &kp LGUI &trans &kp SPACE    &kp RSHIFT &trans &kp RALT
                        >;
                };
        };
};
